
PROJET-ECG-IHM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005184  08005184  00006184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d8  080051d8  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080051d8  080051d8  000061d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e0  080051e0  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000061e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080051e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000014  080051fc  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080051fc  000071f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146ae  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b2  00000000  00000000  0001b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0001dda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  0001f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220ef  00000000  00000000  0001feec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157be  00000000  00000000  00041fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8542  00000000  00000000  00057799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fcdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  0012fd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00134d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800516c 	.word	0x0800516c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	0800516c 	.word	0x0800516c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <SPI_TX_Byte>:
//-----------------------------[ Static Functions' Definitions ]----------------------------

// Static Functions Used By Library But Not Visible To User Who Include The Library (Driver)

static void SPI_TX_Byte(uint8_t au8_DATA)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(g_hspi, &au8_DATA, 1, 10);
 80004c6:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <SPI_TX_Byte+0x20>)
 80004c8:	6818      	ldr	r0, [r3, #0]
 80004ca:	1df9      	adds	r1, r7, #7
 80004cc:	230a      	movs	r3, #10
 80004ce:	2201      	movs	r2, #1
 80004d0:	f003 fa73 	bl	80039ba <HAL_SPI_Transmit>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000030 	.word	0x20000030

080004e0 <SS_ENABLE>:

static void SS_ENABLE(uint8_t au8_MATRIX_Instance)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 0);
 80004ea:	79fa      	ldrb	r2, [r7, #7]
 80004ec:	490b      	ldr	r1, [pc, #44]	@ (800051c <SS_ENABLE+0x3c>)
 80004ee:	4613      	mov	r3, r2
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	4413      	add	r3, r2
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	440b      	add	r3, r1
 80004f8:	6818      	ldr	r0, [r3, #0]
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	4907      	ldr	r1, [pc, #28]	@ (800051c <SS_ENABLE+0x3c>)
 80004fe:	4613      	mov	r3, r2
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	4413      	add	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	440b      	add	r3, r1
 8000508:	3304      	adds	r3, #4
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	4619      	mov	r1, r3
 8000510:	f002 f814 	bl	800253c <HAL_GPIO_WritePin>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	08005184 	.word	0x08005184

08000520 <SS_DISABLE>:

static void SS_DISABLE(uint8_t au8_MATRIX_Instance)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 1);
 800052a:	79fa      	ldrb	r2, [r7, #7]
 800052c:	490b      	ldr	r1, [pc, #44]	@ (800055c <SS_DISABLE+0x3c>)
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	79fa      	ldrb	r2, [r7, #7]
 800053c:	4907      	ldr	r1, [pc, #28]	@ (800055c <SS_DISABLE+0x3c>)
 800053e:	4613      	mov	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	440b      	add	r3, r1
 8000548:	3304      	adds	r3, #4
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	f001 fff4 	bl	800253c <HAL_GPIO_WritePin>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08005184 	.word	0x08005184

08000560 <DOT_MATRIX_Init>:
//----------------------------[ Library Functions' Definitions ]---------------------------

// Functions To Be Used By The User Who Include The Library (Driver)

void DOT_MATRIX_Init(SPI_HandleTypeDef * hspi)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	@ 0x30
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 0318 	add.w	r3, r7, #24
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800057e:	2300      	movs	r3, #0
 8000580:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    g_hspi = hspi;
 8000584:	4ab2      	ldr	r2, [pc, #712]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]

    /*--------[ Configure The SS GPIO Pins ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 800058a:	2300      	movs	r3, #0
 800058c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000590:	e06e      	b.n	8000670 <DOT_MATRIX_Init+0x110>
    {
    	if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOA)
 8000592:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000596:	49af      	ldr	r1, [pc, #700]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 8000598:	4613      	mov	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	4413      	add	r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	440b      	add	r3, r1
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005a8:	d10c      	bne.n	80005c4 <DOT_MATRIX_Init+0x64>
    	{
    		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4bab      	ldr	r3, [pc, #684]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	4aaa      	ldr	r2, [pc, #680]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b6:	4ba8      	ldr	r3, [pc, #672]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	e030      	b.n	8000626 <DOT_MATRIX_Init+0xc6>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOB)
 80005c4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80005c8:	49a2      	ldr	r1, [pc, #648]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4aa1      	ldr	r2, [pc, #644]	@ (800085c <DOT_MATRIX_Init+0x2fc>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d10c      	bne.n	80005f6 <DOT_MATRIX_Init+0x96>
    	{
    		__HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b9e      	ldr	r3, [pc, #632]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 80005de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e0:	4a9d      	ldr	r2, [pc, #628]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e8:	4b9b      	ldr	r3, [pc, #620]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 80005ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	e017      	b.n	8000626 <DOT_MATRIX_Init+0xc6>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOC)
 80005f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80005fa:	4996      	ldr	r1, [pc, #600]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a95      	ldr	r2, [pc, #596]	@ (8000860 <DOT_MATRIX_Init+0x300>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d10b      	bne.n	8000626 <DOT_MATRIX_Init+0xc6>
    	{
    		__HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b92      	ldr	r3, [pc, #584]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a91      	ldr	r2, [pc, #580]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061a:	4b8f      	ldr	r3, [pc, #572]	@ (8000858 <DOT_MATRIX_Init+0x2f8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]

    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOE)
    	{
    		__HAL_RCC_GPIOE_CLK_ENABLE();
    	}*/
    	GPIO_InitStruct.Pin = DOT_MATRIX_CfgParam[i].SS_PIN;
 8000626:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800062a:	498a      	ldr	r1, [pc, #552]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	440b      	add	r3, r1
 8000636:	3304      	adds	r3, #4
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	@ 0x24
    	HAL_GPIO_Init(DOT_MATRIX_CfgParam[i].SS_GPIO, &GPIO_InitStruct);
 8000648:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800064c:	4981      	ldr	r1, [pc, #516]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f107 0218 	add.w	r2, r7, #24
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fe01 	bl	8002268 <HAL_GPIO_Init>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8000666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800066a:	3301      	adds	r3, #1
 800066c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000670:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000674:	2b00      	cmp	r3, #0
 8000676:	d08c      	beq.n	8000592 <DOT_MATRIX_Init+0x32>
    }
    /*--------[ Configure The SPI Peripheral ]-------*/
    g_hspi->Instance = DOT_MATRIX_SPI;
 8000678:	4b75      	ldr	r3, [pc, #468]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a79      	ldr	r2, [pc, #484]	@ (8000864 <DOT_MATRIX_Init+0x304>)
 800067e:	601a      	str	r2, [r3, #0]
    g_hspi->Init.Mode = SPI_MODE_MASTER;
 8000680:	4b73      	ldr	r3, [pc, #460]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000688:	605a      	str	r2, [r3, #4]
    g_hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b71      	ldr	r3, [pc, #452]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
    g_hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000692:	4b6f      	ldr	r3, [pc, #444]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800069a:	60da      	str	r2, [r3, #12]
    g_hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800069c:	4b6c      	ldr	r3, [pc, #432]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
    g_hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
    g_hspi->Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b68      	ldr	r3, [pc, #416]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b4:	619a      	str	r2, [r3, #24]
    g_hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006b6:	4b66      	ldr	r3, [pc, #408]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2238      	movs	r2, #56	@ 0x38
 80006bc:	61da      	str	r2, [r3, #28]
    g_hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006be:	4b64      	ldr	r3, [pc, #400]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
    g_hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b62      	ldr	r3, [pc, #392]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	@ 0x24
    g_hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ce:	4b60      	ldr	r3, [pc, #384]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
    g_hspi->Init.CRCPolynomial = 10;
 80006d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	220a      	movs	r2, #10
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    HAL_SPI_Init(g_hspi);
 80006de:	4b5c      	ldr	r3, [pc, #368]	@ (8000850 <DOT_MATRIX_Init+0x2f0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 f8c6 	bl	8003874 <HAL_SPI_Init>

    /*--------[ Initialize & Configure The MAX7219 Devices ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80006ee:	e144      	b.n	800097a <DOT_MATRIX_Init+0x41a>
    {
    	// Set BCD Decode Mode
    	SS_ENABLE(i);
 80006f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fef3 	bl	80004e0 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000700:	e00a      	b.n	8000718 <DOT_MATRIX_Init+0x1b8>
    	{
    	    SPI_TX_Byte(0x09);
 8000702:	2009      	movs	r0, #9
 8000704:	f7ff feda 	bl	80004bc <SPI_TX_Byte>
    	    SPI_TX_Byte(0x00);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fed7 	bl	80004bc <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800070e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000712:	3301      	adds	r3, #1
 8000714:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000718:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800071c:	494d      	ldr	r1, [pc, #308]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	3308      	adds	r3, #8
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000730:	429a      	cmp	r2, r3
 8000732:	d3e6      	bcc.n	8000702 <DOT_MATRIX_Init+0x1a2>
    	}
    	SS_DISABLE(i);
 8000734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fef1 	bl	8000520 <SS_DISABLE>
    	// Set Dot Matrix Unit Brightness
    	SS_ENABLE(i);
 800073e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fecc 	bl	80004e0 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8000748:	2300      	movs	r3, #0
 800074a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800074e:	e014      	b.n	800077a <DOT_MATRIX_Init+0x21a>
    	{
    		SPI_TX_Byte(0x0A); // Select Intensity register
 8000750:	200a      	movs	r0, #10
 8000752:	f7ff feb3 	bl	80004bc <SPI_TX_Byte>
    		SPI_TX_Byte(DOT_MATRIX_CfgParam[i].BRIGHTNESS);
 8000756:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800075a:	493e      	ldr	r1, [pc, #248]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	440b      	add	r3, r1
 8000766:	3309      	adds	r3, #9
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fea6 	bl	80004bc <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8000770:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000774:	3301      	adds	r3, #1
 8000776:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800077a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800077e:	4935      	ldr	r1, [pc, #212]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	440b      	add	r3, r1
 800078a:	3308      	adds	r3, #8
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000792:	429a      	cmp	r2, r3
 8000794:	d3dc      	bcc.n	8000750 <DOT_MATRIX_Init+0x1f0>
    	}
    	SS_DISABLE(i);
 8000796:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fec0 	bl	8000520 <SS_DISABLE>
    	// Set Display Refresh
    	SS_ENABLE(i);
 80007a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fe9b 	bl	80004e0 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80007b0:	e00a      	b.n	80007c8 <DOT_MATRIX_Init+0x268>
    	{
    		SPI_TX_Byte(0x0B); // Select Scan-Limit register
 80007b2:	200b      	movs	r0, #11
 80007b4:	f7ff fe82 	bl	80004bc <SPI_TX_Byte>
    		SPI_TX_Byte(0x07); // 1-7
 80007b8:	2007      	movs	r0, #7
 80007ba:	f7ff fe7f 	bl	80004bc <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80007be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80007c2:	3301      	adds	r3, #1
 80007c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80007c8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80007cc:	4921      	ldr	r1, [pc, #132]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	3308      	adds	r3, #8
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3e6      	bcc.n	80007b2 <DOT_MATRIX_Init+0x252>
    	}
    	SS_DISABLE(i);
 80007e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe99 	bl	8000520 <SS_DISABLE>
    	// Turn ON The Display
    	SS_ENABLE(i);
 80007ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe74 	bl	80004e0 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80007fe:	e00a      	b.n	8000816 <DOT_MATRIX_Init+0x2b6>
    	{
    		SPI_TX_Byte(0x0C);
 8000800:	200c      	movs	r0, #12
 8000802:	f7ff fe5b 	bl	80004bc <SPI_TX_Byte>
    		SPI_TX_Byte(0x01);
 8000806:	2001      	movs	r0, #1
 8000808:	f7ff fe58 	bl	80004bc <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800080c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000810:	3301      	adds	r3, #1
 8000812:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000816:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800081a:	490e      	ldr	r1, [pc, #56]	@ (8000854 <DOT_MATRIX_Init+0x2f4>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800082e:	429a      	cmp	r2, r3
 8000830:	d3e6      	bcc.n	8000800 <DOT_MATRIX_Init+0x2a0>
    	}
    	SS_DISABLE(i);
 8000832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe72 	bl	8000520 <SS_DISABLE>
    	// Disable Display Test
    	SS_ENABLE(i);
 800083c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fe4d 	bl	80004e0 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8000846:	2300      	movs	r3, #0
 8000848:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800084c:	e017      	b.n	800087e <DOT_MATRIX_Init+0x31e>
 800084e:	bf00      	nop
 8000850:	20000030 	.word	0x20000030
 8000854:	08005184 	.word	0x08005184
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400
 8000860:	48000800 	.word	0x48000800
 8000864:	40003c00 	.word	0x40003c00
    	{
    		SPI_TX_Byte(0x0F);
 8000868:	200f      	movs	r0, #15
 800086a:	f7ff fe27 	bl	80004bc <SPI_TX_Byte>
    		SPI_TX_Byte(0x00);
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff fe24 	bl	80004bc <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8000874:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000878:	3301      	adds	r3, #1
 800087a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800087e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000882:	4943      	ldr	r1, [pc, #268]	@ (8000990 <DOT_MATRIX_Init+0x430>)
 8000884:	4613      	mov	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	3308      	adds	r3, #8
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000896:	429a      	cmp	r2, r3
 8000898:	d3e6      	bcc.n	8000868 <DOT_MATRIX_Init+0x308>
    	}
    	SS_DISABLE(i);
 800089a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe3e 	bl	8000520 <SS_DISABLE>

        // Initialize The Global Structure
        gs_MATRIX_info[i].Ticks = 0;
 80008a4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008a8:	493a      	ldr	r1, [pc, #232]	@ (8000994 <DOT_MATRIX_Init+0x434>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4413      	add	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	440b      	add	r3, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
        gs_MATRIX_info[i].BufferInit = 0;
 80008b8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008bc:	4935      	ldr	r1, [pc, #212]	@ (8000994 <DOT_MATRIX_Init+0x434>)
 80008be:	4613      	mov	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	4413      	add	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	440b      	add	r3, r1
 80008c8:	330b      	adds	r3, #11
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Arr_Index = 0;
 80008ce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008d2:	4930      	ldr	r1, [pc, #192]	@ (8000994 <DOT_MATRIX_Init+0x434>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	3308      	adds	r3, #8
 80008e0:	2200      	movs	r2, #0
 80008e2:	801a      	strh	r2, [r3, #0]
        gs_MATRIX_info[i].Col_Index = 0;
 80008e4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008e8:	492a      	ldr	r1, [pc, #168]	@ (8000994 <DOT_MATRIX_Init+0x434>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4413      	add	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	330a      	adds	r3, #10
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Max_Ticks = DOT_MATRIX_CfgParam[i].SCROLL_SPEED;
 80008fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80008fe:	4924      	ldr	r1, [pc, #144]	@ (8000990 <DOT_MATRIX_Init+0x430>)
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	3306      	adds	r3, #6
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000912:	4618      	mov	r0, r3
 8000914:	491f      	ldr	r1, [pc, #124]	@ (8000994 <DOT_MATRIX_Init+0x434>)
 8000916:	4613      	mov	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	4413      	add	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	3304      	adds	r3, #4
 8000922:	6018      	str	r0, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8000924:	2300      	movs	r3, #0
 8000926:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800092a:	e012      	b.n	8000952 <DOT_MATRIX_Init+0x3f2>
        {
        	gs_MATRIX_info[i].Buffer[j] = 0x00;
 800092c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000930:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8000934:	4817      	ldr	r0, [pc, #92]	@ (8000994 <DOT_MATRIX_Init+0x434>)
 8000936:	4613      	mov	r3, r2
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	4413      	add	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4403      	add	r3, r0
 8000940:	440b      	add	r3, r1
 8000942:	330c      	adds	r3, #12
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8000948:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800094c:	3301      	adds	r3, #1
 800094e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000952:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8000956:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <DOT_MATRIX_Init+0x430>)
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4403      	add	r3, r0
 8000966:	3308      	adds	r3, #8
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	4299      	cmp	r1, r3
 800096e:	dbdd      	blt.n	800092c <DOT_MATRIX_Init+0x3cc>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8000970:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000974:	3301      	adds	r3, #1
 8000976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800097a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800097e:	2b00      	cmp	r3, #0
 8000980:	f43f aeb6 	beq.w	80006f0 <DOT_MATRIX_Init+0x190>
        }
    }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	@ 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	08005184 	.word	0x08005184
 8000994:	20000034 	.word	0x20000034

08000998 <DOT_MATRIX_Init_TMR>:

void DOT_MATRIX_Init_TMR(SPI_HandleTypeDef * hspi, TIM_HandleTypeDef* TMR_Handle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
    uint32_t ARR_Value = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24

	DOT_MATRIX_Init(hspi);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff fdcd 	bl	8000560 <DOT_MATRIX_Init>

	/*--------[ Configure The Matrix Timer Base If Enabled ]-------*/
    if(MATRIX_TIMER_EN == 1)
    {
    	ARR_Value = (MATRIX_TIMER_CLK * 10.0 * MATRIX_TIME_BASE);
 80009c6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
    	TMR_Handle->Instance = MATRIX_TIMER;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <DOT_MATRIX_Init_TMR+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	2263      	movs	r2, #99	@ 0x63
 80009d6:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 80009de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 80009f2:	6838      	ldr	r0, [r7, #0]
 80009f4:	f003 fabc 	bl	8003f70 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f003 fc66 	bl	80042d6 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	6838      	ldr	r0, [r7, #0]
 8000a1a:	f003 fe61 	bl	80046e0 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8000a1e:	6838      	ldr	r0, [r7, #0]
 8000a20:	f003 fafe 	bl	8004020 <HAL_TIM_Base_Start_IT>
    }
}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40014000 	.word	0x40014000

08000a30 <MATRIX_DisplayMessage>:
    }
    TxByte(au8_MATRIX_Instance, Column, 0x00);
}

void MATRIX_DisplayMessage(uint8_t au8_MATRIX_Instance, char* ArrayPointer, uint16_t ArraySize)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	80bb      	strh	r3, [r7, #4]
	gs_MATRIX_info[au8_MATRIX_Instance].ArrPtr = ArrayPointer;
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	4913      	ldr	r1, [pc, #76]	@ (8000a90 <MATRIX_DisplayMessage+0x60>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3320      	adds	r3, #32
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	601a      	str	r2, [r3, #0]
	gs_MATRIX_info[au8_MATRIX_Instance].ArrSize = ArraySize-1;
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	88bb      	ldrh	r3, [r7, #4]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	b298      	uxth	r0, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	@ (8000a90 <MATRIX_DisplayMessage+0x60>)
 8000a5e:	4613      	mov	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	331c      	adds	r3, #28
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	801a      	strh	r2, [r3, #0]
	gs_MATRIX_info[au8_MATRIX_Instance].BufferInit = 1;
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	4907      	ldr	r1, [pc, #28]	@ (8000a90 <MATRIX_DisplayMessage+0x60>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	330b      	adds	r3, #11
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000034 	.word	0x20000034

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a98:	f000 fbaf 	bl	80011fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9c:	f000 f81e 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa0:	f000 f992 	bl	8000dc8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000aa4:	f000 f8d0 	bl	8000c48 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000aa8:	f000 f86a 	bl	8000b80 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000aac:	f000 f90a 	bl	8000cc4 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000ab0:	f000 f95a 	bl	8000d68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialisation de la matrice LED
  DOT_MATRIX_Init_TMR(&hspi3, &htim15);
 8000ab4:	4906      	ldr	r1, [pc, #24]	@ (8000ad0 <main+0x3c>)
 8000ab6:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <main+0x40>)
 8000ab8:	f7ff ff6e 	bl	8000998 <DOT_MATRIX_Init_TMR>

  // Configuration du message à afficher
  MATRIX_DisplayMessage(0, message, sizeof(message));
 8000abc:	2207      	movs	r2, #7
 8000abe:	4906      	ldr	r1, [pc, #24]	@ (8000ad8 <main+0x44>)
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff ffb5 	bl	8000a30 <MATRIX_DisplayMessage>

  // Démarrage du timer
  HAL_TIM_Base_Start_IT(&htim15);
 8000ac6:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <main+0x3c>)
 8000ac8:	f003 faaa 	bl	8004020 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <main+0x38>
 8000ad0:	20000120 	.word	0x20000120
 8000ad4:	200000bc 	.word	0x200000bc
 8000ad8:	20000000 	.word	0x20000000

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b096      	sub	sp, #88	@ 0x58
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2244      	movs	r2, #68	@ 0x44
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fb11 	bl	8005112 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b02:	f001 fd41 	bl	8002588 <HAL_PWREx_ControlVoltageScaling>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b0c:	f000 f9be 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b22:	2302      	movs	r3, #2
 8000b24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fd78 	bl	8002634 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b4a:	f000 f99f 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2303      	movs	r3, #3
 8000b54:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	2104      	movs	r1, #4
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 f978 	bl	8002e5c <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b72:	f000 f98b 	bl	8000e8c <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3758      	adds	r7, #88	@ 0x58
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b96:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000b98:	4a29      	ldr	r2, [pc, #164]	@ (8000c40 <MX_ADC1_Init+0xc0>)
 8000b9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bae:	4b23      	ldr	r3, [pc, #140]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd4:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf6:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000bf8:	f000 fd00 	bl	80015fc <HAL_ADC_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c02:	f000 f943 	bl	8000e8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_ADC1_Init+0xc4>)
 8000c08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c12:	237f      	movs	r3, #127	@ 0x7f
 8000c14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c16:	2304      	movs	r3, #4
 8000c18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <MX_ADC1_Init+0xbc>)
 8000c24:	f000 fe2c 	bl	8001880 <HAL_ADC_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c2e:	f000 f92d 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000058 	.word	0x20000058
 8000c40:	50040000 	.word	0x50040000
 8000c44:	3ef08000 	.word	0x3ef08000

08000c48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc0 <MX_SPI3_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c62:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000c66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c96:	2207      	movs	r2, #7
 8000c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_SPI3_Init+0x74>)
 8000ca8:	f002 fde4 	bl	8003874 <HAL_SPI_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cb2:	f000 f8eb 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000bc 	.word	0x200000bc
 8000cc0:	40003c00 	.word	0x40003c00

08000cc4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <MX_TIM15_Init+0xa0>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000cea:	224f      	movs	r2, #79	@ 0x4f
 8000cec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000-1;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000cf6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cfa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d0e:	4814      	ldr	r0, [pc, #80]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000d10:	f003 f92e 	bl	8003f70 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f000 f8b7 	bl	8000e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000d2c:	f003 fad3 	bl	80042d6 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000d36:	f000 f8a9 	bl	8000e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <MX_TIM15_Init+0x9c>)
 8000d48:	f003 fcca 	bl	80046e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000d52:	f000 f89b 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000120 	.word	0x20000120
 8000d64:	40014000 	.word	0x40014000

08000d68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <MX_USART1_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000dac:	f003 fd1c 	bl	80047e8 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 f869 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000016c 	.word	0x2000016c
 8000dc4:	40013800 	.word	0x40013800

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4a28      	ldr	r2, [pc, #160]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a22      	ldr	r2, [pc, #136]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	4a1c      	ldr	r2, [pc, #112]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <MX_GPIO_Init+0xbc>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4817      	ldr	r0, [pc, #92]	@ (8000e88 <MX_GPIO_Init+0xc0>)
 8000e2c:	f001 fb86 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f001 fb7f 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <MX_GPIO_Init+0xc0>)
 8000e56:	f001 fa07 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e76:	f001 f9f7 	bl	8002268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <Error_Handler+0x8>

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <HAL_MspInit+0x44>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_MspInit+0x44>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b09e      	sub	sp, #120	@ 0x78
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	2254      	movs	r2, #84	@ 0x54
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 f906 	bl	8005112 <memset>
  if(hadc->Instance==ADC1)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <HAL_ADC_MspInit+0xa0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d133      	bne.n	8000f78 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f16:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 f9bf 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f2c:	f7ff ffae 	bl	8000e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_ADC_MspInit+0xa4>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f34:	4a13      	ldr	r2, [pc, #76]	@ (8000f84 <HAL_ADC_MspInit+0xa4>)
 8000f36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_ADC_MspInit+0xa4>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_ADC_MspInit+0xa4>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <HAL_ADC_MspInit+0xa4>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_ADC_MspInit+0xa4>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = SIGNAL_Pin;
 8000f60:	2301      	movs	r3, #1
 8000f62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f64:	230b      	movs	r3, #11
 8000f66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <HAL_ADC_MspInit+0xa8>)
 8000f74:	f001 f978 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f78:	bf00      	nop
 8000f7a:	3778      	adds	r7, #120	@ 0x78
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	50040000 	.word	0x50040000
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400

08000f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <HAL_SPI_MspInit+0x7c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d127      	bne.n	8000ffe <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <HAL_SPI_MspInit+0x80>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb2:	4a16      	ldr	r2, [pc, #88]	@ (800100c <HAL_SPI_MspInit+0x80>)
 8000fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fba:	4b14      	ldr	r3, [pc, #80]	@ (800100c <HAL_SPI_MspInit+0x80>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <HAL_SPI_MspInit+0x80>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <HAL_SPI_MspInit+0x80>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <HAL_SPI_MspInit+0x80>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fde:	2338      	movs	r3, #56	@ 0x38
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <HAL_SPI_MspInit+0x84>)
 8000ffa:	f001 f935 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	@ 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40003c00 	.word	0x40003c00
 800100c:	40021000 	.word	0x40021000
 8001010:	48000400 	.word	0x48000400

08001014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_TIM_Base_MspInit+0x44>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d113      	bne.n	800104e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_TIM_Base_MspInit+0x48>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	4a0c      	ldr	r2, [pc, #48]	@ (800105c <HAL_TIM_Base_MspInit+0x48>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001030:	6613      	str	r3, [r2, #96]	@ 0x60
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_TIM_Base_MspInit+0x48>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2018      	movs	r0, #24
 8001044:	f001 f8d9 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001048:	2018      	movs	r0, #24
 800104a:	f001 f8f2 	bl	8002232 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM15_MspInit 1 */

  }

}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40014000 	.word	0x40014000
 800105c:	40021000 	.word	0x40021000

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09e      	sub	sp, #120	@ 0x78
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2254      	movs	r2, #84	@ 0x54
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f846 	bl	8005112 <memset>
  if(huart->Instance==USART1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <HAL_UART_MspInit+0xa8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d137      	bne.n	8001100 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001090:	2301      	movs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f002 f901 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a8:	f7ff fef0 	bl	8000e8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ac:	4b17      	ldr	r3, [pc, #92]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b0:	4a16      	ldr	r2, [pc, #88]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	4a10      	ldr	r2, [pc, #64]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_UART_MspInit+0xac>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ee:	2307      	movs	r3, #7
 80010f0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fc:	f001 f8b4 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001100:	bf00      	nop
 8001102:	3778      	adds	r7, #120	@ 0x78
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40013800 	.word	0x40013800
 800110c:	40021000 	.word	0x40021000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f89d 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001176:	f002 ffa7 	bl	80040c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000120 	.word	0x20000120

08001184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ac:	f7ff ffea 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopForever+0xe>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopForever+0x16>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f003 ffa5 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011da:	f7ff fc5b 	bl	8000a94 <main>

080011de <LoopForever>:

LoopForever:
    b LoopForever
 80011de:	e7fe      	b.n	80011de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011e0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011ec:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 80011f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80011f4:	200001f8 	.word	0x200001f8

080011f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_IRQHandler>

080011fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 ffed 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120a:	200f      	movs	r0, #15
 800120c:	f000 f80e 	bl	800122c <HAL_InitTick>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	e001      	b.n	8001220 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800121c:	f7ff fe3c 	bl	8000e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001220:	79fb      	ldrb	r3, [r7, #7]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_InitTick+0x6c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_InitTick+0x70>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_InitTick+0x6c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fff9 	bl	800224e <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d809      	bhi.n	800127c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 ffc3 	bl	80021fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_InitTick+0x74>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e007      	b.n	800128c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e004      	b.n	800128c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e001      	b.n	800128c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000010 	.word	0x20000010
 800129c:	20000008 	.word	0x20000008
 80012a0:	2000000c 	.word	0x2000000c

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000010 	.word	0x20000010
 80012c8:	200001f4 	.word	0x200001f4

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200001f4 	.word	0x200001f4

080012e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	609a      	str	r2, [r3, #8]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3360      	adds	r3, #96	@ 0x60
 800135e:	461a      	mov	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <LL_ADC_SetOffset+0x44>)
 800136e:	4013      	ands	r3, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	4313      	orrs	r3, r2
 800137c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	03fff000 	.word	0x03fff000

08001394 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3360      	adds	r3, #96	@ 0x60
 80013a2:	461a      	mov	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3360      	adds	r3, #96	@ 0x60
 80013d0:	461a      	mov	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3330      	adds	r3, #48	@ 0x30
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	4413      	add	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	211f      	movs	r1, #31
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0e9b      	lsrs	r3, r3, #26
 800142e:	f003 011f 	and.w	r1, r3, #31
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001442:	bf00      	nop
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800144e:	b480      	push	{r7}
 8001450:	b087      	sub	sp, #28
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3314      	adds	r3, #20
 800145e:	461a      	mov	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	0e5b      	lsrs	r3, r3, #25
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	0d1b      	lsrs	r3, r3, #20
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	2107      	movs	r1, #7
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	0d1b      	lsrs	r3, r3, #20
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	431a      	orrs	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001498:	bf00      	nop
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0318 	and.w	r3, r3, #24
 80014c6:	4908      	ldr	r1, [pc, #32]	@ (80014e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014c8:	40d9      	lsrs	r1, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	400b      	ands	r3, r1
 80014ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d2:	431a      	orrs	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	0007ffff 	.word	0x0007ffff

080014ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6093      	str	r3, [r2, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001524:	d101      	bne.n	800152a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800154c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001574:	d101      	bne.n	800157a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <LL_ADC_IsEnabled+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_IsEnabled+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d101      	bne.n	80015ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e126      	b.n	8001864 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fc5b 	bl	8000ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff67 	bl	8001510 <LL_ADC_IsDeepPowerDownEnabled>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff4d 	bl	80014ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff82 	bl	8001560 <LL_ADC_IsInternalRegulatorEnabled>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d115      	bne.n	800168e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff66 	bl	8001538 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800166c:	4b7f      	ldr	r3, [pc, #508]	@ (800186c <HAL_ADC_Init+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	4a7f      	ldr	r2, [pc, #508]	@ (8001870 <HAL_ADC_Init+0x274>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	3301      	adds	r3, #1
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001680:	e002      	b.n	8001688 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3b01      	subs	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff64 	bl	8001560 <LL_ADC_IsInternalRegulatorEnabled>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	f043 0210 	orr.w	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f043 0201 	orr.w	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff75 	bl	80015ae <LL_ADC_REG_IsConversionOngoing>
 80016c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 80bf 	bne.w	8001852 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80bb 	bne.w	8001852 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016e4:	f043 0202 	orr.w	r2, r3, #2
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff49 	bl	8001588 <LL_ADC_IsEnabled>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10b      	bne.n	8001714 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016fc:	485d      	ldr	r0, [pc, #372]	@ (8001874 <HAL_ADC_Init+0x278>)
 80016fe:	f7ff ff43 	bl	8001588 <LL_ADC_IsEnabled>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4619      	mov	r1, r3
 800170e:	485a      	ldr	r0, [pc, #360]	@ (8001878 <HAL_ADC_Init+0x27c>)
 8001710:	f7ff fde8 	bl	80012e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e5b      	ldrb	r3, [r3, #25]
 8001718:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800171e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001724:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800172a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001732:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	3b01      	subs	r3, #1
 8001748:	045b      	lsls	r3, r3, #17
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001764:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	4b42      	ldr	r3, [pc, #264]	@ (800187c <HAL_ADC_Init+0x280>)
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	430b      	orrs	r3, r1
 800177e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff25 	bl	80015d4 <LL_ADC_INJ_IsConversionOngoing>
 800178a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d13d      	bne.n	800180e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d13a      	bne.n	800180e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800179c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017b4:	f023 0302 	bic.w	r3, r3, #2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	69b9      	ldr	r1, [r7, #24]
 80017be:	430b      	orrs	r3, r1
 80017c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d118      	bne.n	80017fe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017ee:	430a      	orrs	r2, r1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	e007      	b.n	800180e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10c      	bne.n	8001830 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	f023 010f 	bic.w	r1, r3, #15
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	631a      	str	r2, [r3, #48]	@ 0x30
 800182e:	e007      	b.n	8001840 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020f 	bic.w	r2, r2, #15
 800183e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001850:	e007      	b.n	8001862 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001862:	7ffb      	ldrb	r3, [r7, #31]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000008 	.word	0x20000008
 8001870:	053e2d63 	.word	0x053e2d63
 8001874:	50040000 	.word	0x50040000
 8001878:	50040300 	.word	0x50040300
 800187c:	fff0c007 	.word	0xfff0c007

08001880 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0b6      	sub	sp, #216	@ 0xd8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x22>
 800189e:	2302      	movs	r3, #2
 80018a0:	e3bb      	b.n	800201a <HAL_ADC_ConfigChannel+0x79a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fe7d 	bl	80015ae <LL_ADC_REG_IsConversionOngoing>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 83a0 	bne.w	8001ffc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d824      	bhi.n	8001916 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	3b02      	subs	r3, #2
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d81b      	bhi.n	800190e <HAL_ADC_ConfigChannel+0x8e>
 80018d6:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <HAL_ADC_ConfigChannel+0x5c>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f5 	.word	0x080018f5
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001905 	.word	0x08001905
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80018ec:	230c      	movs	r3, #12
 80018ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018f2:	e010      	b.n	8001916 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80018f4:	2312      	movs	r3, #18
 80018f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018fa:	e00c      	b.n	8001916 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80018fc:	2318      	movs	r3, #24
 80018fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001902:	e008      	b.n	8001916 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800190c:	e003      	b.n	8001916 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800190e:	2306      	movs	r3, #6
 8001910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001914:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001924:	f7ff fd67 	bl	80013f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe3e 	bl	80015ae <LL_ADC_REG_IsConversionOngoing>
 8001932:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fe4a 	bl	80015d4 <LL_ADC_INJ_IsConversionOngoing>
 8001940:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 81a4 	bne.w	8001c96 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800194e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 819f 	bne.w	8001c96 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	461a      	mov	r2, r3
 8001966:	f7ff fd72 	bl	800144e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b04      	cmp	r3, #4
 800198a:	d00a      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6919      	ldr	r1, [r3, #16]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800199c:	f7ff fcd6 	bl	800134c <LL_ADC_SetOffset>
 80019a0:	e179      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fcf3 	bl	8001394 <LL_ADC_GetOffsetChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10a      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x14e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fce8 	bl	8001394 <LL_ADC_GetOffsetChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	0e9b      	lsrs	r3, r3, #26
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	e01e      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x18c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fcdd 	bl	8001394 <LL_ADC_GetOffsetChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80019fc:	2320      	movs	r3, #32
 80019fe:	e004      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x1a4>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	e018      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x1d6>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001a48:	2320      	movs	r3, #32
 8001a4a:	e004      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001a4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d106      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fcac 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc90 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x214>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fc85 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	f003 021f 	and.w	r2, r3, #31
 8001a92:	e01e      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x252>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc7a 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	e004      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x26a>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0e9b      	lsrs	r3, r3, #26
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	e018      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x29c>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	e004      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d106      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2101      	movs	r1, #1
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fc49 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2102      	movs	r1, #2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fc2d 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x2da>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fc22 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	0e9b      	lsrs	r3, r3, #26
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	e01e      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x318>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fc17 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	e004      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x330>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0e9b      	lsrs	r3, r3, #26
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	e014      	b.n	8001bda <HAL_ADC_ConfigChannel+0x35a>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e004      	b.n	8001bda <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d106      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	2102      	movs	r1, #2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fbea 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2103      	movs	r1, #3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fbce 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x398>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2103      	movs	r1, #3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fbc3 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	f003 021f 	and.w	r2, r3, #31
 8001c16:	e017      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x3c8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fbb8 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c32:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e003      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x3e0>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	e011      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x404>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c70:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	e003      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001c7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d106      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2103      	movs	r1, #3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fb95 	bl	80013c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fc74 	bl	8001588 <LL_ADC_IsEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 8140 	bne.w	8001f28 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f7ff fbf5 	bl	80014a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	4a8f      	ldr	r2, [pc, #572]	@ (8001efc <HAL_ADC_ConfigChannel+0x67c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	f040 8131 	bne.w	8001f28 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10b      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x46e>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2b09      	cmp	r3, #9
 8001ce4:	bf94      	ite	ls
 8001ce6:	2301      	movls	r3, #1
 8001ce8:	2300      	movhi	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	e019      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x4a2>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	bf94      	ite	ls
 8001d1c:	2301      	movls	r3, #1
 8001d1e:	2300      	movhi	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d079      	beq.n	8001e1a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d107      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x4c2>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0e9b      	lsrs	r3, r3, #26
 8001d38:	3301      	adds	r3, #1
 8001d3a:	069b      	lsls	r3, r3, #26
 8001d3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d40:	e015      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x4ee>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d52:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e003      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001d5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	069b      	lsls	r3, r3, #26
 8001d6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x50e>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	0e9b      	lsrs	r3, r3, #26
 8001d80:	3301      	adds	r3, #1
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	e017      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x53e>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d9e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e003      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	ea42 0103 	orr.w	r1, r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x564>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0e9b      	lsrs	r3, r3, #26
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 021f 	and.w	r2, r3, #31
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	051b      	lsls	r3, r3, #20
 8001de2:	e018      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x596>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001dfc:	2320      	movs	r3, #32
 8001dfe:	e003      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e16:	430b      	orrs	r3, r1
 8001e18:	e081      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x5b6>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0e9b      	lsrs	r3, r3, #26
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	069b      	lsls	r3, r3, #26
 8001e30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e34:	e015      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x5e2>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e003      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	069b      	lsls	r3, r3, #26
 8001e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x602>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0e9b      	lsrs	r3, r3, #26
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	e017      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x632>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	ea42 0103 	orr.w	r1, r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x65e>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f003 021f 	and.w	r2, r3, #31
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b1e      	subs	r3, #30
 8001ed6:	051b      	lsls	r3, r3, #20
 8001ed8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	e01e      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x69c>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	60fb      	str	r3, [r7, #12]
  return result;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d104      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e006      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x688>
 8001efa:	bf00      	nop
 8001efc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	3b1e      	subs	r3, #30
 8001f16:	051b      	lsls	r3, r3, #20
 8001f18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7ff fa93 	bl	800144e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_ADC_ConfigChannel+0x7a4>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d06c      	beq.n	800200e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f34:	483c      	ldr	r0, [pc, #240]	@ (8002028 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f36:	f7ff f9fb 	bl	8001330 <LL_ADC_GetCommonPathInternalCh>
 8001f3a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3a      	ldr	r2, [pc, #232]	@ (800202c <HAL_ADC_ConfigChannel+0x7ac>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d127      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d121      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a35      	ldr	r2, [pc, #212]	@ (8002030 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d157      	bne.n	800200e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f66:	4619      	mov	r1, r3
 8001f68:	482f      	ldr	r0, [pc, #188]	@ (8002028 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f6a:	f7ff f9ce 	bl	800130a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f6e:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	4a30      	ldr	r2, [pc, #192]	@ (8002038 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	099b      	lsrs	r3, r3, #6
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f96:	e03a      	b.n	800200e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a27      	ldr	r2, [pc, #156]	@ (800203c <HAL_ADC_ConfigChannel+0x7bc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d113      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fa6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10d      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <HAL_ADC_ConfigChannel+0x7b0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d12a      	bne.n	800200e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4819      	ldr	r0, [pc, #100]	@ (8002028 <HAL_ADC_ConfigChannel+0x7a8>)
 8001fc4:	f7ff f9a1 	bl	800130a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc8:	e021      	b.n	800200e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d11c      	bne.n	800200e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d116      	bne.n	800200e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <HAL_ADC_ConfigChannel+0x7b0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d111      	bne.n	800200e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	@ (8002028 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ff6:	f7ff f988 	bl	800130a <LL_ADC_SetCommonPathInternalCh>
 8001ffa:	e008      	b.n	800200e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002016:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800201a:	4618      	mov	r0, r3
 800201c:	37d8      	adds	r7, #216	@ 0xd8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	80080000 	.word	0x80080000
 8002028:	50040300 	.word	0x50040300
 800202c:	c7520000 	.word	0xc7520000
 8002030:	50040000 	.word	0x50040000
 8002034:	20000008 	.word	0x20000008
 8002038:	053e2d63 	.word	0x053e2d63
 800203c:	cb840000 	.word	0xcb840000
 8002040:	80000001 	.word	0x80000001

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	@ (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	@ (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	@ (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	@ (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	@ 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	@ 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff8e 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff29 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff3e 	bl	800208c <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff8e 	bl	8002138 <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff31 	bl	80020a8 <__NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffa2 	bl	80021a0 <SysTick_Config>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002276:	e148      	b.n	800250a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 813a 	beq.w	8002504 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d005      	beq.n	80022a8 <HAL_GPIO_Init+0x40>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d130      	bne.n	800230a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022de:	2201      	movs	r2, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0201 	and.w	r2, r3, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b03      	cmp	r3, #3
 8002314:	d017      	beq.n	8002346 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d123      	bne.n	800239a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	6939      	ldr	r1, [r7, #16]
 8002396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0203 	and.w	r2, r3, #3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8094 	beq.w	8002504 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023dc:	4b52      	ldr	r3, [pc, #328]	@ (8002528 <HAL_GPIO_Init+0x2c0>)
 80023de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e0:	4a51      	ldr	r2, [pc, #324]	@ (8002528 <HAL_GPIO_Init+0x2c0>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80023e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <HAL_GPIO_Init+0x2c0>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023f4:	4a4d      	ldr	r2, [pc, #308]	@ (800252c <HAL_GPIO_Init+0x2c4>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800241e:	d00d      	beq.n	800243c <HAL_GPIO_Init+0x1d4>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a43      	ldr	r2, [pc, #268]	@ (8002530 <HAL_GPIO_Init+0x2c8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d007      	beq.n	8002438 <HAL_GPIO_Init+0x1d0>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a42      	ldr	r2, [pc, #264]	@ (8002534 <HAL_GPIO_Init+0x2cc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_GPIO_Init+0x1cc>
 8002430:	2302      	movs	r3, #2
 8002432:	e004      	b.n	800243e <HAL_GPIO_Init+0x1d6>
 8002434:	2307      	movs	r3, #7
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x1d6>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_GPIO_Init+0x1d6>
 800243c:	2300      	movs	r3, #0
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4093      	lsls	r3, r2
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800244e:	4937      	ldr	r1, [pc, #220]	@ (800252c <HAL_GPIO_Init+0x2c4>)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800245c:	4b36      	ldr	r3, [pc, #216]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002480:	4a2d      	ldr	r2, [pc, #180]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002486:	4b2c      	ldr	r3, [pc, #176]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024aa:	4a23      	ldr	r2, [pc, #140]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024b0:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024d4:	4a18      	ldr	r2, [pc, #96]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024da:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002538 <HAL_GPIO_Init+0x2d0>)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3301      	adds	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	f47f aeaf 	bne.w	8002278 <HAL_GPIO_Init+0x10>
  }
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40021000 	.word	0x40021000
 800252c:	40010000 	.word	0x40010000
 8002530:	48000400 	.word	0x48000400
 8002534:	48000800 	.word	0x48000800
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002558:	e002      	b.n	8002560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <HAL_PWREx_GetVoltageRange+0x18>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40007000 	.word	0x40007000

08002588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002596:	d130      	bne.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002598:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025a4:	d038      	beq.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2232      	movs	r2, #50	@ 0x32
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002630 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0c9b      	lsrs	r3, r3, #18
 80025c8:	3301      	adds	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025cc:	e002      	b.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d4:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e0:	d102      	bne.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f2      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f4:	d110      	bne.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e00f      	b.n	800261a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002606:	d007      	beq.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002608:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002610:	4a05      	ldr	r2, [pc, #20]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002616:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40007000 	.word	0x40007000
 800262c:	20000008 	.word	0x20000008
 8002630:	431bde83 	.word	0x431bde83

08002634 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	f000 bc02 	b.w	8002e4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002648:	4b96      	ldr	r3, [pc, #600]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002652:	4b94      	ldr	r3, [pc, #592]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80e4 	beq.w	8002832 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_RCC_OscConfig+0x4c>
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	f040 808b 	bne.w	800278e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 8087 	bne.w	800278e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002680:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_OscConfig+0x64>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e3d9      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	4b81      	ldr	r3, [pc, #516]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <HAL_RCC_OscConfig+0x7e>
 80026a8:	4b7e      	ldr	r3, [pc, #504]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b0:	e005      	b.n	80026be <HAL_RCC_OscConfig+0x8a>
 80026b2:	4b7c      	ldr	r3, [pc, #496]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026be:	4293      	cmp	r3, r2
 80026c0:	d223      	bcs.n	800270a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fd8c 	bl	80031e4 <RCC_SetFlashLatencyFromMSIRange>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e3ba      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d6:	4b73      	ldr	r3, [pc, #460]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a72      	ldr	r2, [pc, #456]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026dc:	f043 0308 	orr.w	r3, r3, #8
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b70      	ldr	r3, [pc, #448]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	496d      	ldr	r1, [pc, #436]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f4:	4b6b      	ldr	r3, [pc, #428]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	4968      	ldr	r1, [pc, #416]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
 8002708:	e025      	b.n	8002756 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800270a:	4b66      	ldr	r3, [pc, #408]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a65      	ldr	r2, [pc, #404]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b63      	ldr	r3, [pc, #396]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4960      	ldr	r1, [pc, #384]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002728:	4b5e      	ldr	r3, [pc, #376]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	495b      	ldr	r1, [pc, #364]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fd4c 	bl	80031e4 <RCC_SetFlashLatencyFromMSIRange>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e37a      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002756:	f000 fc81 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b51      	ldr	r3, [pc, #324]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4950      	ldr	r1, [pc, #320]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a4e      	ldr	r2, [pc, #312]	@ (80028ac <HAL_RCC_OscConfig+0x278>)
 8002774:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002776:	4b4e      	ldr	r3, [pc, #312]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fd56 	bl	800122c <HAL_InitTick>
 8002780:	4603      	mov	r3, r0
 8002782:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d052      	beq.n	8002830 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	e35e      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d032      	beq.n	80027fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002796:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a42      	ldr	r2, [pc, #264]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fd93 	bl	80012cc <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027aa:	f7fe fd8f 	bl	80012cc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e347      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027bc:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c8:	4b36      	ldr	r3, [pc, #216]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a35      	ldr	r2, [pc, #212]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f043 0308 	orr.w	r3, r3, #8
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4930      	ldr	r1, [pc, #192]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e6:	4b2f      	ldr	r3, [pc, #188]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	492b      	ldr	r1, [pc, #172]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
 80027fa:	e01a      	b.n	8002832 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027fc:	4b29      	ldr	r3, [pc, #164]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002808:	f7fe fd60 	bl	80012cc <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002810:	f7fe fd5c 	bl	80012cc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e314      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002822:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1dc>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d073      	beq.n	8002926 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d005      	beq.n	8002850 <HAL_RCC_OscConfig+0x21c>
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d10e      	bne.n	8002868 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d063      	beq.n	8002924 <HAL_RCC_OscConfig+0x2f0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d15f      	bne.n	8002924 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e2f1      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x24c>
 8002872:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a0b      	ldr	r2, [pc, #44]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e025      	b.n	80028cc <HAL_RCC_OscConfig+0x298>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002888:	d114      	bne.n	80028b4 <HAL_RCC_OscConfig+0x280>
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a05      	ldr	r2, [pc, #20]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b03      	ldr	r3, [pc, #12]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a02      	ldr	r2, [pc, #8]	@ (80028a4 <HAL_RCC_OscConfig+0x270>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e013      	b.n	80028cc <HAL_RCC_OscConfig+0x298>
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08005190 	.word	0x08005190
 80028ac:	20000008 	.word	0x20000008
 80028b0:	2000000c 	.word	0x2000000c
 80028b4:	4ba0      	ldr	r3, [pc, #640]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a9f      	ldr	r2, [pc, #636]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b9d      	ldr	r3, [pc, #628]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a9c      	ldr	r2, [pc, #624]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fcfa 	bl	80012cc <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fcf6 	bl	80012cc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e2ae      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ee:	4b92      	ldr	r3, [pc, #584]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x2a8>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fce6 	bl	80012cc <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe fce2 	bl	80012cc <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e29a      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002916:	4b88      	ldr	r3, [pc, #544]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x2d0>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d060      	beq.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x310>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d119      	bne.n	8002972 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d116      	bne.n	8002972 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002944:	4b7c      	ldr	r3, [pc, #496]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x328>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e277      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b76      	ldr	r3, [pc, #472]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4973      	ldr	r1, [pc, #460]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002970:	e040      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d023      	beq.n	80029c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fca1 	bl	80012cc <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7fe fc9d 	bl	80012cc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e255      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a0:	4b65      	ldr	r3, [pc, #404]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b62      	ldr	r3, [pc, #392]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	495f      	ldr	r1, [pc, #380]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	e018      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fc7d 	bl	80012cc <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7fe fc79 	bl	80012cc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e231      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e8:	4b53      	ldr	r3, [pc, #332]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03c      	beq.n	8002a7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a08:	4b4b      	ldr	r3, [pc, #300]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fc58 	bl	80012cc <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe fc54 	bl	80012cc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e20c      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a32:	4b41      	ldr	r3, [pc, #260]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <HAL_RCC_OscConfig+0x3ec>
 8002a40:	e01b      	b.n	8002a7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a48:	4a3b      	ldr	r2, [pc, #236]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7fe fc3b 	bl	80012cc <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7fe fc37 	bl	80012cc <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e1ef      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6c:	4b32      	ldr	r3, [pc, #200]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1ef      	bne.n	8002a5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80a6 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	4a26      	ldr	r2, [pc, #152]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa4:	4b24      	ldr	r3, [pc, #144]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d118      	bne.n	8002af2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fbfe 	bl	80012cc <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fe fbfa 	bl	80012cc <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1b2      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_RCC_OscConfig+0x508>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4d8>
 8002afa:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b0a:	e029      	b.n	8002b60 <HAL_RCC_OscConfig+0x52c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d115      	bne.n	8002b40 <HAL_RCC_OscConfig+0x50c>
 8002b14:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1a:	4a07      	ldr	r2, [pc, #28]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	4a03      	ldr	r2, [pc, #12]	@ (8002b38 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x52c>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	4b9a      	ldr	r3, [pc, #616]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b46:	4a99      	ldr	r2, [pc, #612]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b50:	4b96      	ldr	r3, [pc, #600]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b56:	4a95      	ldr	r2, [pc, #596]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d016      	beq.n	8002b96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe fbb0 	bl	80012cc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fbac 	bl	80012cc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e162      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b86:	4b89      	ldr	r3, [pc, #548]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ed      	beq.n	8002b70 <HAL_RCC_OscConfig+0x53c>
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fe fb99 	bl	80012cc <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7fe fb95 	bl	80012cc <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e14b      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb4:	4b7d      	ldr	r3, [pc, #500]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ed      	bne.n	8002b9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b78      	ldr	r3, [pc, #480]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	4a77      	ldr	r2, [pc, #476]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03c      	beq.n	8002c5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002be8:	4b70      	ldr	r3, [pc, #448]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bee:	4a6f      	ldr	r2, [pc, #444]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fb68 	bl	80012cc <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c00:	f7fe fb64 	bl	80012cc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e11c      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c12:	4b66      	ldr	r3, [pc, #408]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ef      	beq.n	8002c00 <HAL_RCC_OscConfig+0x5cc>
 8002c20:	e01b      	b.n	8002c5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c22:	4b62      	ldr	r3, [pc, #392]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c28:	4a60      	ldr	r2, [pc, #384]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fb4b 	bl	80012cc <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c3a:	f7fe fb47 	bl	80012cc <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0ff      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c4c:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ef      	bne.n	8002c3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80f3 	beq.w	8002e4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	f040 80c9 	bne.w	8002e00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f003 0203 	and.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d12c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d123      	bne.n	8002cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d11b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d113      	bne.n	8002cdc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d109      	bne.n	8002cdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d06b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d062      	beq.n	8002da8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ce2:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0ac      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002cf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cfe:	f7fe fae5 	bl	80012cc <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe fae1 	bl	80012cc <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e099      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d18:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d24:	4b21      	ldr	r3, [pc, #132]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b21      	ldr	r3, [pc, #132]	@ (8002db0 <HAL_RCC_OscConfig+0x77c>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d34:	3a01      	subs	r2, #1
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d3e:	0212      	lsls	r2, r2, #8
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d46:	0852      	lsrs	r2, r2, #1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0552      	lsls	r2, r2, #21
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d52:	0852      	lsrs	r2, r2, #1
 8002d54:	3a01      	subs	r2, #1
 8002d56:	0652      	lsls	r2, r2, #25
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d5e:	06d2      	lsls	r2, r2, #27
 8002d60:	430a      	orrs	r2, r1
 8002d62:	4912      	ldr	r1, [pc, #72]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d68:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d74:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a0c      	ldr	r2, [pc, #48]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d80:	f7fe faa4 	bl	80012cc <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe faa0 	bl	80012cc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e058      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da6:	e050      	b.n	8002e4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e04f      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
 8002dac:	40021000 	.word	0x40021000
 8002db0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db4:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d144      	bne.n	8002e4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dc0:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dcc:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd8:	f7fe fa78 	bl	80012cc <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fa74 	bl	80012cc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e02c      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x7ac>
 8002dfe:	e024      	b.n	8002e4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d01f      	beq.n	8002e46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe fa5b 	bl	80012cc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe fa57 	bl	80012cc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	4905      	ldr	r1, [pc, #20]	@ (8002e54 <HAL_RCC_OscConfig+0x820>)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_OscConfig+0x824>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
 8002e44:	e001      	b.n	8002e4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000
 8002e58:	feeefffc 	.word	0xfeeefffc

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0e7      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b75      	ldr	r3, [pc, #468]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b72      	ldr	r3, [pc, #456]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0207 	bic.w	r2, r3, #7
 8002e86:	4970      	ldr	r1, [pc, #448]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0cf      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d908      	bls.n	8002ece <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ebc:	4b63      	ldr	r3, [pc, #396]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4960      	ldr	r1, [pc, #384]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d04c      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0a6      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002efa:	4b54      	ldr	r3, [pc, #336]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d115      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e09a      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f12:	4b4e      	ldr	r3, [pc, #312]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e08e      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f22:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e086      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4b46      	ldr	r3, [pc, #280]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4943      	ldr	r1, [pc, #268]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe f9c2 	bl	80012cc <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4c:	f7fe f9be 	bl	80012cc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e06e      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 020c 	and.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1eb      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d208      	bcs.n	8002fa2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	492b      	ldr	r1, [pc, #172]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa2:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d210      	bcs.n	8002fd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb0:	4b25      	ldr	r3, [pc, #148]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 0207 	bic.w	r2, r3, #7
 8002fb8:	4923      	ldr	r1, [pc, #140]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc0:	4b21      	ldr	r3, [pc, #132]	@ (8003048 <HAL_RCC_ClockConfig+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e036      	b.n	8003040 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fde:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4918      	ldr	r1, [pc, #96]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffc:	4b13      	ldr	r3, [pc, #76]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4910      	ldr	r1, [pc, #64]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003010:	f000 f824 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	490b      	ldr	r1, [pc, #44]	@ (8003050 <HAL_RCC_ClockConfig+0x1f4>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	4a09      	ldr	r2, [pc, #36]	@ (8003054 <HAL_RCC_ClockConfig+0x1f8>)
 800302e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <HAL_RCC_ClockConfig+0x1fc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe f8f9 	bl	800122c <HAL_InitTick>
 800303a:	4603      	mov	r3, r0
 800303c:	72fb      	strb	r3, [r7, #11]

  return status;
 800303e:	7afb      	ldrb	r3, [r7, #11]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
 8003050:	08005190 	.word	0x08005190
 8003054:	20000008 	.word	0x20000008
 8003058:	2000000c 	.word	0x2000000c

0800305c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	@ 0x24
 8003060:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306a:	4b3e      	ldr	r3, [pc, #248]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003074:	4b3b      	ldr	r3, [pc, #236]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x34>
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d121      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d11e      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003090:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800309c:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	61fb      	str	r3, [r7, #28]
 80030aa:	e005      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d102      	bne.n	80030da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d4:	4b25      	ldr	r3, [pc, #148]	@ (800316c <HAL_RCC_GetSysClockFreq+0x110>)
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	e004      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030e0:	4b23      	ldr	r3, [pc, #140]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x114>)
 80030e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d134      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0xa6>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d003      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0xac>
 8003100:	e005      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003102:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_RCC_GetSysClockFreq+0x110>)
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003108:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x114>)
 800310a:	617b      	str	r3, [r7, #20]
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	617b      	str	r3, [r7, #20]
      break;
 8003112:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	3301      	adds	r3, #1
 8003120:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	fb03 f202 	mul.w	r2, r3, r2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313a:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x108>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	0e5b      	lsrs	r3, r3, #25
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	3301      	adds	r3, #1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003154:	69bb      	ldr	r3, [r7, #24]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3724      	adds	r7, #36	@ 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	080051a8 	.word	0x080051a8
 800316c:	00f42400 	.word	0x00f42400
 8003170:	007a1200 	.word	0x007a1200

08003174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	@ (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000008 	.word	0x20000008

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4904      	ldr	r1, [pc, #16]	@ (80031b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000
 80031b4:	080051a0 	.word	0x080051a0

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031bc:	f7ff ffda 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0adb      	lsrs	r3, r3, #11
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	@ (80031e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	080051a0 	.word	0x080051a0

080031e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031f0:	4b2a      	ldr	r3, [pc, #168]	@ (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031fc:	f7ff f9b6 	bl	800256c <HAL_PWREx_GetVoltageRange>
 8003200:	6178      	str	r0, [r7, #20]
 8003202:	e014      	b.n	800322e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b25      	ldr	r3, [pc, #148]	@ (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	4a24      	ldr	r2, [pc, #144]	@ (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003210:	4b22      	ldr	r3, [pc, #136]	@ (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800321c:	f7ff f9a6 	bl	800256c <HAL_PWREx_GetVoltageRange>
 8003220:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4b1e      	ldr	r3, [pc, #120]	@ (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	4a1d      	ldr	r2, [pc, #116]	@ (800329c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800322c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003234:	d10b      	bne.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b80      	cmp	r3, #128	@ 0x80
 800323a:	d919      	bls.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003240:	d902      	bls.n	8003248 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003242:	2302      	movs	r3, #2
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e013      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003248:	2301      	movs	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e010      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b80      	cmp	r3, #128	@ 0x80
 8003252:	d902      	bls.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003254:	2303      	movs	r3, #3
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e00a      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b80      	cmp	r3, #128	@ 0x80
 800325e:	d102      	bne.n	8003266 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003260:	2302      	movs	r3, #2
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e004      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b70      	cmp	r3, #112	@ 0x70
 800326a:	d101      	bne.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800326c:	2301      	movs	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003270:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 0207 	bic.w	r2, r3, #7
 8003278:	4909      	ldr	r1, [pc, #36]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003280:	4b07      	ldr	r3, [pc, #28]	@ (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	429a      	cmp	r2, r3
 800328c:	d001      	beq.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	40022000 	.word	0x40022000

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032ac:	2300      	movs	r3, #0
 80032ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d031      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032c8:	d01a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032ce:	d814      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032d8:	d10f      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032da:	4b5d      	ldr	r3, [pc, #372]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a5c      	ldr	r2, [pc, #368]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e6:	e00c      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f9ce 	bl	8003690 <RCCEx_PLLSAI1_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f8:	e003      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	74fb      	strb	r3, [r7, #19]
      break;
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003308:	4b51      	ldr	r3, [pc, #324]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	494e      	ldr	r1, [pc, #312]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800331e:	e001      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 809e 	beq.w	800346e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003336:	4b46      	ldr	r3, [pc, #280]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334c:	4b40      	ldr	r3, [pc, #256]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003350:	4a3f      	ldr	r2, [pc, #252]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003356:	6593      	str	r3, [r2, #88]	@ 0x58
 8003358:	4b3d      	ldr	r3, [pc, #244]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003364:	2301      	movs	r3, #1
 8003366:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003368:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a39      	ldr	r2, [pc, #228]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003374:	f7fd ffaa 	bl	80012cc <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337a:	e009      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337c:	f7fd ffa6 	bl	80012cc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d902      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	74fb      	strb	r3, [r7, #19]
        break;
 800338e:	e005      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003390:	4b30      	ldr	r3, [pc, #192]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ef      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d15a      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01e      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d019      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033be:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ca:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033da:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ea:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d016      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fd ff66 	bl	80012cc <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003402:	e00b      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fd ff62 	bl	80012cc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d902      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	74fb      	strb	r3, [r7, #19]
            break;
 800341a:	e006      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341c:	4b0c      	ldr	r3, [pc, #48]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ec      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003430:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343e:	4904      	ldr	r1, [pc, #16]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003446:	e009      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	74bb      	strb	r3, [r7, #18]
 800344c:	e006      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345c:	7c7b      	ldrb	r3, [r7, #17]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003462:	4b8a      	ldr	r3, [pc, #552]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	4a89      	ldr	r2, [pc, #548]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800347a:	4b84      	ldr	r3, [pc, #528]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f023 0203 	bic.w	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4980      	ldr	r1, [pc, #512]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800349c:	4b7b      	ldr	r3, [pc, #492]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f023 020c 	bic.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	4978      	ldr	r1, [pc, #480]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034be:	4b73      	ldr	r3, [pc, #460]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	496f      	ldr	r1, [pc, #444]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e0:	4b6a      	ldr	r3, [pc, #424]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ee:	4967      	ldr	r1, [pc, #412]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003502:	4b62      	ldr	r3, [pc, #392]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003508:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	495e      	ldr	r1, [pc, #376]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003524:	4b59      	ldr	r3, [pc, #356]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	4956      	ldr	r1, [pc, #344]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003546:	4b51      	ldr	r3, [pc, #324]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	494d      	ldr	r1, [pc, #308]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d028      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003568:	4b48      	ldr	r3, [pc, #288]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	4945      	ldr	r1, [pc, #276]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003586:	d106      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b40      	ldr	r3, [pc, #256]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a3f      	ldr	r2, [pc, #252]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
 8003594:	e011      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800359e:	d10c      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f872 	bl	8003690 <RCCEx_PLLSAI1_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d028      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c6:	4b31      	ldr	r3, [pc, #196]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	492d      	ldr	r1, [pc, #180]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e6:	4b29      	ldr	r3, [pc, #164]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4a28      	ldr	r2, [pc, #160]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035f0:	60d3      	str	r3, [r2, #12]
 80035f2:	e011      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3304      	adds	r3, #4
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f843 	bl	8003690 <RCCEx_PLLSAI1_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01c      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003632:	4916      	ldr	r1, [pc, #88]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003642:	d10c      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f820 	bl	8003690 <RCCEx_PLLSAI1_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800366a:	4b08      	ldr	r3, [pc, #32]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003678:	4904      	ldr	r1, [pc, #16]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003680:	7cbb      	ldrb	r3, [r7, #18]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000

08003690 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800369e:	4b74      	ldr	r3, [pc, #464]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d018      	beq.n	80036dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036aa:	4b71      	ldr	r3, [pc, #452]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d10d      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
       ||
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
       ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d047      	beq.n	8003766 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e044      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d018      	beq.n	8003716 <RCCEx_PLLSAI1_Config+0x86>
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d825      	bhi.n	8003734 <RCCEx_PLLSAI1_Config+0xa4>
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d002      	beq.n	80036f2 <RCCEx_PLLSAI1_Config+0x62>
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d009      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x74>
 80036f0:	e020      	b.n	8003734 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11d      	bne.n	800373a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003702:	e01a      	b.n	800373a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003704:	4b5a      	ldr	r3, [pc, #360]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d116      	bne.n	800373e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003714:	e013      	b.n	800373e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003716:	4b56      	ldr	r3, [pc, #344]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003722:	4b53      	ldr	r3, [pc, #332]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003732:	e006      	b.n	8003742 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      break;
 8003738:	e004      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003742:	bf00      	nop
    }

    if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800374a:	4b49      	ldr	r3, [pc, #292]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6819      	ldr	r1, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	430b      	orrs	r3, r1
 8003760:	4943      	ldr	r1, [pc, #268]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003762:	4313      	orrs	r3, r2
 8003764:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d17c      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800376c:	4b40      	ldr	r3, [pc, #256]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3f      	ldr	r2, [pc, #252]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003778:	f7fd fda8 	bl	80012cc <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800377e:	e009      	b.n	8003794 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003780:	f7fd fda4 	bl	80012cc <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d902      	bls.n	8003794 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	73fb      	strb	r3, [r7, #15]
        break;
 8003792:	e005      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003794:	4b36      	ldr	r3, [pc, #216]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ef      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d15f      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d110      	bne.n	80037ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ac:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80037b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	0211      	lsls	r1, r2, #8
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	06d2      	lsls	r2, r2, #27
 80037c4:	430a      	orrs	r2, r1
 80037c6:	492a      	ldr	r1, [pc, #168]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	610b      	str	r3, [r1, #16]
 80037cc:	e027      	b.n	800381e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d112      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d4:	4b26      	ldr	r3, [pc, #152]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6892      	ldr	r2, [r2, #8]
 80037e4:	0211      	lsls	r1, r2, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6912      	ldr	r2, [r2, #16]
 80037ea:	0852      	lsrs	r2, r2, #1
 80037ec:	3a01      	subs	r2, #1
 80037ee:	0552      	lsls	r2, r2, #21
 80037f0:	430a      	orrs	r2, r1
 80037f2:	491f      	ldr	r1, [pc, #124]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	610b      	str	r3, [r1, #16]
 80037f8:	e011      	b.n	800381e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003802:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	0211      	lsls	r1, r2, #8
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6952      	ldr	r2, [r2, #20]
 8003810:	0852      	lsrs	r2, r2, #1
 8003812:	3a01      	subs	r2, #1
 8003814:	0652      	lsls	r2, r2, #25
 8003816:	430a      	orrs	r2, r1
 8003818:	4915      	ldr	r1, [pc, #84]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800381e:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a13      	ldr	r2, [pc, #76]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003828:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fd fd4f 	bl	80012cc <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003830:	e009      	b.n	8003846 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003832:	f7fd fd4b 	bl	80012cc <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d902      	bls.n	8003846 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	73fb      	strb	r3, [r7, #15]
          break;
 8003844:	e005      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003846:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ef      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4903      	ldr	r1, [pc, #12]	@ (8003870 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000

08003874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e095      	b.n	80039b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d108      	bne.n	80038a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003896:	d009      	beq.n	80038ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
 800389e:	e005      	b.n	80038ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd fb60 	bl	8000f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038ec:	d902      	bls.n	80038f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	e002      	b.n	80038fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003902:	d007      	beq.n	8003914 <HAL_SPI_Init+0xa0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800390c:	d002      	beq.n	8003914 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	ea42 0103 	orr.w	r1, r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	f003 0204 	and.w	r2, r3, #4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003990:	ea42 0103 	orr.w	r1, r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b088      	sub	sp, #32
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ca:	f7fd fc7f 	bl	80012cc <HAL_GetTick>
 80039ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
 80039e2:	e15c      	b.n	8003c9e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Transmit+0x36>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e154      	b.n	8003c9e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_SPI_Transmit+0x48>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e14d      	b.n	8003c9e <HAL_SPI_Transmit+0x2e4>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a54:	d10f      	bne.n	8003a76 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	d007      	beq.n	8003a94 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a9c:	d952      	bls.n	8003b44 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0xf2>
 8003aa6:	8b7b      	ldrh	r3, [r7, #26]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d145      	bne.n	8003b38 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ad0:	e032      	b.n	8003b38 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d112      	bne.n	8003b06 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b04:	e018      	b.n	8003b38 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b06:	f7fd fbe1 	bl	80012cc <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d803      	bhi.n	8003b1e <HAL_SPI_Transmit+0x164>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Transmit+0x16a>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0b2      	b.n	8003c9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1c7      	bne.n	8003ad2 <HAL_SPI_Transmit+0x118>
 8003b42:	e083      	b.n	8003c4c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_SPI_Transmit+0x198>
 8003b4c:	8b7b      	ldrh	r3, [r7, #26]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d177      	bne.n	8003c42 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d912      	bls.n	8003b82 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b02      	subs	r3, #2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b80:	e05f      	b.n	8003c42 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ba8:	e04b      	b.n	8003c42 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d12b      	bne.n	8003c10 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d912      	bls.n	8003be8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	881a      	ldrh	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b02      	subs	r3, #2
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003be6:	e02c      	b.n	8003c42 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	7812      	ldrb	r2, [r2, #0]
 8003bf4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c0e:	e018      	b.n	8003c42 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c10:	f7fd fb5c 	bl	80012cc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d803      	bhi.n	8003c28 <HAL_SPI_Transmit+0x26e>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d102      	bne.n	8003c2e <HAL_SPI_Transmit+0x274>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e02d      	b.n	8003c9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ae      	bne.n	8003baa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f947 	bl	8003ee4 <SPI_EndRxTxTransaction>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cb8:	f7fd fb08 	bl	80012cc <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cc8:	f7fd fb00 	bl	80012cc <HAL_GetTick>
 8003ccc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cce:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	015b      	lsls	r3, r3, #5
 8003cd4:	0d1b      	lsrs	r3, r3, #20
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cde:	e054      	b.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d050      	beq.n	8003d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ce8:	f7fd faf0 	bl	80012cc <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d902      	bls.n	8003cfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d13d      	bne.n	8003d7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d16:	d111      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d20:	d004      	beq.n	8003d2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2a:	d107      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d44:	d10f      	bne.n	8003d66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e017      	b.n	8003daa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d19b      	bne.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000008 	.word	0x20000008

08003db8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	@ 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dca:	f7fd fa7f 	bl	80012cc <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003dda:	f7fd fa77 	bl	80012cc <HAL_GetTick>
 8003dde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003de8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00da      	lsls	r2, r3, #3
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	0d1b      	lsrs	r3, r3, #20
 8003df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e00:	e060      	b.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e08:	d107      	bne.n	8003e1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d050      	beq.n	8003ec4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e22:	f7fd fa53 	bl	80012cc <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d902      	bls.n	8003e38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d13d      	bne.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e50:	d111      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5a:	d004      	beq.n	8003e66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e64:	d107      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7e:	d10f      	bne.n	8003ea0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e010      	b.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d196      	bne.n	8003e02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3728      	adds	r7, #40	@ 0x28
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000008 	.word	0x20000008

08003ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff ff5b 	bl	8003db8 <SPI_WaitFifoStateUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e027      	b.n	8003f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2180      	movs	r1, #128	@ 0x80
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fec0 	bl	8003ca8 <SPI_WaitFlagStateUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e014      	b.n	8003f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff ff34 	bl	8003db8 <SPI_WaitFifoStateUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e000      	b.n	8003f68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e049      	b.n	8004016 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd f83c 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 fa8c 	bl	80044cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d001      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e03b      	b.n	80040b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <HAL_TIM_Base_Start_IT+0x9c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x4e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004062:	d004      	beq.n	800406e <HAL_TIM_Base_Start_IT+0x4e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d115      	bne.n	800409a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004076:	4013      	ands	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b06      	cmp	r3, #6
 800407e:	d015      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x8c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004086:	d011      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	e008      	b.n	80040ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e000      	b.n	80040ae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40014000 	.word	0x40014000
 80040c4:	00010007 	.word	0x00010007

080040c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d020      	beq.n	800412c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01b      	beq.n	800412c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0202 	mvn.w	r2, #2
 80040fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9bc 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f9ae 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f9bf 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d020      	beq.n	8004178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01b      	beq.n	8004178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0204 	mvn.w	r2, #4
 8004148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f996 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f988 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f999 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d020      	beq.n	80041c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01b      	beq.n	80041c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0208 	mvn.w	r2, #8
 8004194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2204      	movs	r2, #4
 800419a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f970 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f962 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f973 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d020      	beq.n	8004210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0210 	mvn.w	r2, #16
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2208      	movs	r2, #8
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f94a 	bl	8004490 <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f93c 	bl	800447c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f94d 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0201 	mvn.w	r2, #1
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f91a 	bl	8004468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 faaf 	bl	80047c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800427e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 faa7 	bl	80047d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00c      	beq.n	80042aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f907 	bl	80044b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00c      	beq.n	80042ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f06f 0220 	mvn.w	r2, #32
 80042c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fa6f 	bl	80047ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_ConfigClockSource+0x1c>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0b6      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x18a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004310:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004314:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800431c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432e:	d03e      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xd8>
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004334:	f200 8087 	bhi.w	8004446 <HAL_TIM_ConfigClockSource+0x170>
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433c:	f000 8086 	beq.w	800444c <HAL_TIM_ConfigClockSource+0x176>
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004344:	d87f      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
 8004346:	2b70      	cmp	r3, #112	@ 0x70
 8004348:	d01a      	beq.n	8004380 <HAL_TIM_ConfigClockSource+0xaa>
 800434a:	2b70      	cmp	r3, #112	@ 0x70
 800434c:	d87b      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
 800434e:	2b60      	cmp	r3, #96	@ 0x60
 8004350:	d050      	beq.n	80043f4 <HAL_TIM_ConfigClockSource+0x11e>
 8004352:	2b60      	cmp	r3, #96	@ 0x60
 8004354:	d877      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
 8004356:	2b50      	cmp	r3, #80	@ 0x50
 8004358:	d03c      	beq.n	80043d4 <HAL_TIM_ConfigClockSource+0xfe>
 800435a:	2b50      	cmp	r3, #80	@ 0x50
 800435c:	d873      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
 800435e:	2b40      	cmp	r3, #64	@ 0x40
 8004360:	d058      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x13e>
 8004362:	2b40      	cmp	r3, #64	@ 0x40
 8004364:	d86f      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
 8004366:	2b30      	cmp	r3, #48	@ 0x30
 8004368:	d064      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0x15e>
 800436a:	2b30      	cmp	r3, #48	@ 0x30
 800436c:	d86b      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
 800436e:	2b20      	cmp	r3, #32
 8004370:	d060      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0x15e>
 8004372:	2b20      	cmp	r3, #32
 8004374:	d867      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d05c      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0x15e>
 800437a:	2b10      	cmp	r3, #16
 800437c:	d05a      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0x15e>
 800437e:	e062      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004390:	f000 f986 	bl	80046a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	609a      	str	r2, [r3, #8]
      break;
 80043ac:	e04f      	b.n	800444e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043be:	f000 f96f 	bl	80046a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d0:	609a      	str	r2, [r3, #8]
      break;
 80043d2:	e03c      	b.n	800444e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e0:	461a      	mov	r2, r3
 80043e2:	f000 f8e3 	bl	80045ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2150      	movs	r1, #80	@ 0x50
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f93c 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 80043f2:	e02c      	b.n	800444e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004400:	461a      	mov	r2, r3
 8004402:	f000 f902 	bl	800460a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2160      	movs	r1, #96	@ 0x60
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f92c 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 8004412:	e01c      	b.n	800444e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004420:	461a      	mov	r2, r3
 8004422:	f000 f8c3 	bl	80045ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2140      	movs	r1, #64	@ 0x40
 800442c:	4618      	mov	r0, r3
 800442e:	f000 f91c 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 8004432:	e00c      	b.n	800444e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 f913 	bl	800466a <TIM_ITRx_SetConfig>
      break;
 8004444:	e003      	b.n	800444e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
      break;
 800444a:	e000      	b.n	800444e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800444c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a30      	ldr	r2, [pc, #192]	@ (80045a0 <TIM_Base_SetConfig+0xd4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_Base_SetConfig+0x20>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ea:	d108      	bne.n	80044fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a27      	ldr	r2, [pc, #156]	@ (80045a0 <TIM_Base_SetConfig+0xd4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_Base_SetConfig+0x52>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450c:	d007      	beq.n	800451e <TIM_Base_SetConfig+0x52>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a24      	ldr	r2, [pc, #144]	@ (80045a4 <TIM_Base_SetConfig+0xd8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_Base_SetConfig+0x52>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a23      	ldr	r2, [pc, #140]	@ (80045a8 <TIM_Base_SetConfig+0xdc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <TIM_Base_SetConfig+0xd4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0xa0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a11      	ldr	r2, [pc, #68]	@ (80045a4 <TIM_Base_SetConfig+0xd8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0xa0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a10      	ldr	r2, [pc, #64]	@ (80045a8 <TIM_Base_SetConfig+0xdc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d103      	bne.n	8004574 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d105      	bne.n	8004592 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	611a      	str	r2, [r3, #16]
  }
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400

080045ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0201 	bic.w	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f023 030a 	bic.w	r3, r3, #10
 80045e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800460a:	b480      	push	{r7}
 800460c:	b087      	sub	sp, #28
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f023 0210 	bic.w	r2, r3, #16
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	031b      	lsls	r3, r3, #12
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	f043 0307 	orr.w	r3, r3, #7
 800468c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	021a      	lsls	r2, r3, #8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	609a      	str	r2, [r3, #8]
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e04f      	b.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a21      	ldr	r2, [pc, #132]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d108      	bne.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004728:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a14      	ldr	r2, [pc, #80]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004760:	d004      	beq.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d10c      	bne.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	4313      	orrs	r3, r2
 800477c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40014000 	.word	0x40014000

080047ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e040      	b.n	800487c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fc28 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	@ 0x24
 8004814:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fa54 	bl	8004cdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f825 	bl	8004884 <UART_SetConfig>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e01b      	b.n	800487c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fad3 	bl	8004e20 <UART_CheckIdleState>
 800487a:	4603      	mov	r3, r0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004888:	b08a      	sub	sp, #40	@ 0x28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4bb4      	ldr	r3, [pc, #720]	@ (8004b84 <UART_SetConfig+0x300>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4aa9      	ldr	r2, [pc, #676]	@ (8004b88 <UART_SetConfig+0x304>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ec:	4313      	orrs	r3, r2
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	430a      	orrs	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4aa0      	ldr	r2, [pc, #640]	@ (8004b8c <UART_SetConfig+0x308>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d126      	bne.n	800495c <UART_SetConfig+0xd8>
 800490e:	4ba0      	ldr	r3, [pc, #640]	@ (8004b90 <UART_SetConfig+0x30c>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	2b03      	cmp	r3, #3
 800491a:	d81b      	bhi.n	8004954 <UART_SetConfig+0xd0>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <UART_SetConfig+0xa0>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004945 	.word	0x08004945
 800492c:	0800493d 	.word	0x0800493d
 8004930:	0800494d 	.word	0x0800494d
 8004934:	2301      	movs	r3, #1
 8004936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493a:	e080      	b.n	8004a3e <UART_SetConfig+0x1ba>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004942:	e07c      	b.n	8004a3e <UART_SetConfig+0x1ba>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494a:	e078      	b.n	8004a3e <UART_SetConfig+0x1ba>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004952:	e074      	b.n	8004a3e <UART_SetConfig+0x1ba>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495a:	e070      	b.n	8004a3e <UART_SetConfig+0x1ba>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a8c      	ldr	r2, [pc, #560]	@ (8004b94 <UART_SetConfig+0x310>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d138      	bne.n	80049d8 <UART_SetConfig+0x154>
 8004966:	4b8a      	ldr	r3, [pc, #552]	@ (8004b90 <UART_SetConfig+0x30c>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d82d      	bhi.n	80049d0 <UART_SetConfig+0x14c>
 8004974:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0xf8>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049b1 	.word	0x080049b1
 8004980:	080049d1 	.word	0x080049d1
 8004984:	080049d1 	.word	0x080049d1
 8004988:	080049d1 	.word	0x080049d1
 800498c:	080049c1 	.word	0x080049c1
 8004990:	080049d1 	.word	0x080049d1
 8004994:	080049d1 	.word	0x080049d1
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049d1 	.word	0x080049d1
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e042      	b.n	8004a3e <UART_SetConfig+0x1ba>
 80049b8:	2302      	movs	r3, #2
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049be:	e03e      	b.n	8004a3e <UART_SetConfig+0x1ba>
 80049c0:	2304      	movs	r3, #4
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c6:	e03a      	b.n	8004a3e <UART_SetConfig+0x1ba>
 80049c8:	2308      	movs	r3, #8
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ce:	e036      	b.n	8004a3e <UART_SetConfig+0x1ba>
 80049d0:	2310      	movs	r3, #16
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049d6:	e032      	b.n	8004a3e <UART_SetConfig+0x1ba>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004b88 <UART_SetConfig+0x304>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d12a      	bne.n	8004a38 <UART_SetConfig+0x1b4>
 80049e2:	4b6b      	ldr	r3, [pc, #428]	@ (8004b90 <UART_SetConfig+0x30c>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049f0:	d01a      	beq.n	8004a28 <UART_SetConfig+0x1a4>
 80049f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049f6:	d81b      	bhi.n	8004a30 <UART_SetConfig+0x1ac>
 80049f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049fc:	d00c      	beq.n	8004a18 <UART_SetConfig+0x194>
 80049fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a02:	d815      	bhi.n	8004a30 <UART_SetConfig+0x1ac>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <UART_SetConfig+0x18c>
 8004a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0c:	d008      	beq.n	8004a20 <UART_SetConfig+0x19c>
 8004a0e:	e00f      	b.n	8004a30 <UART_SetConfig+0x1ac>
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e012      	b.n	8004a3e <UART_SetConfig+0x1ba>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1e:	e00e      	b.n	8004a3e <UART_SetConfig+0x1ba>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a26:	e00a      	b.n	8004a3e <UART_SetConfig+0x1ba>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2e:	e006      	b.n	8004a3e <UART_SetConfig+0x1ba>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a36:	e002      	b.n	8004a3e <UART_SetConfig+0x1ba>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a51      	ldr	r2, [pc, #324]	@ (8004b88 <UART_SetConfig+0x304>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d17a      	bne.n	8004b3e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d824      	bhi.n	8004a9a <UART_SetConfig+0x216>
 8004a50:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <UART_SetConfig+0x1d4>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a9b 	.word	0x08004a9b
 8004a60:	08004a85 	.word	0x08004a85
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004a8b 	.word	0x08004a8b
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004a9b 	.word	0x08004a9b
 8004a74:	08004a9b 	.word	0x08004a9b
 8004a78:	08004a93 	.word	0x08004a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7fe fb86 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004a80:	61f8      	str	r0, [r7, #28]
        break;
 8004a82:	e010      	b.n	8004aa6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a84:	4b44      	ldr	r3, [pc, #272]	@ (8004b98 <UART_SetConfig+0x314>)
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e00d      	b.n	8004aa6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8a:	f7fe fae7 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8004a8e:	61f8      	str	r0, [r7, #28]
        break;
 8004a90:	e009      	b.n	8004aa6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a96:	61fb      	str	r3, [r7, #28]
        break;
 8004a98:	e005      	b.n	8004aa6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004aa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8107 	beq.w	8004cbc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d305      	bcc.n	8004aca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d903      	bls.n	8004ad2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ad0:	e0f4      	b.n	8004cbc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	461c      	mov	r4, r3
 8004ad8:	4615      	mov	r5, r2
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	022b      	lsls	r3, r5, #8
 8004ae4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ae8:	0222      	lsls	r2, r4, #8
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	6849      	ldr	r1, [r1, #4]
 8004aee:	0849      	lsrs	r1, r1, #1
 8004af0:	2000      	movs	r0, #0
 8004af2:	4688      	mov	r8, r1
 8004af4:	4681      	mov	r9, r0
 8004af6:	eb12 0a08 	adds.w	sl, r2, r8
 8004afa:	eb43 0b09 	adc.w	fp, r3, r9
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	4659      	mov	r1, fp
 8004b10:	f7fb fb5c 	bl	80001cc <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b22:	d308      	bcc.n	8004b36 <UART_SetConfig+0x2b2>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b2a:	d204      	bcs.n	8004b36 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	60da      	str	r2, [r3, #12]
 8004b34:	e0c2      	b.n	8004cbc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b3c:	e0be      	b.n	8004cbc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b46:	d16a      	bne.n	8004c1e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004b48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d834      	bhi.n	8004bba <UART_SetConfig+0x336>
 8004b50:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <UART_SetConfig+0x2d4>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b9d 	.word	0x08004b9d
 8004b60:	08004ba5 	.word	0x08004ba5
 8004b64:	08004bbb 	.word	0x08004bbb
 8004b68:	08004bab 	.word	0x08004bab
 8004b6c:	08004bbb 	.word	0x08004bbb
 8004b70:	08004bbb 	.word	0x08004bbb
 8004b74:	08004bbb 	.word	0x08004bbb
 8004b78:	08004bb3 	.word	0x08004bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b7c:	f7fe fb06 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004b80:	61f8      	str	r0, [r7, #28]
        break;
 8004b82:	e020      	b.n	8004bc6 <UART_SetConfig+0x342>
 8004b84:	efff69f3 	.word	0xefff69f3
 8004b88:	40008000 	.word	0x40008000
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40004400 	.word	0x40004400
 8004b98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b9c:	f7fe fb0c 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8004ba0:	61f8      	str	r0, [r7, #28]
        break;
 8004ba2:	e010      	b.n	8004bc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd8 <UART_SetConfig+0x454>)
 8004ba6:	61fb      	str	r3, [r7, #28]
        break;
 8004ba8:	e00d      	b.n	8004bc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fe fa57 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8004bae:	61f8      	str	r0, [r7, #28]
        break;
 8004bb0:	e009      	b.n	8004bc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb6:	61fb      	str	r3, [r7, #28]
        break;
 8004bb8:	e005      	b.n	8004bc6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d077      	beq.n	8004cbc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005a      	lsls	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	441a      	add	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b0f      	cmp	r3, #15
 8004be6:	d916      	bls.n	8004c16 <UART_SetConfig+0x392>
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bee:	d212      	bcs.n	8004c16 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f023 030f 	bic.w	r3, r3, #15
 8004bf8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	8afb      	ldrh	r3, [r7, #22]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	8afa      	ldrh	r2, [r7, #22]
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	e052      	b.n	8004cbc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c1c:	e04e      	b.n	8004cbc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d827      	bhi.n	8004c76 <UART_SetConfig+0x3f2>
 8004c26:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <UART_SetConfig+0x3a8>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c67 	.word	0x08004c67
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c77 	.word	0x08004c77
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c50:	f7fe fa9c 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004c54:	61f8      	str	r0, [r7, #28]
        break;
 8004c56:	e014      	b.n	8004c82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c58:	f7fe faae 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
        break;
 8004c5e:	e010      	b.n	8004c82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd8 <UART_SetConfig+0x454>)
 8004c62:	61fb      	str	r3, [r7, #28]
        break;
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7fe f9f9 	bl	800305c <HAL_RCC_GetSysClockFreq>
 8004c6a:	61f8      	str	r0, [r7, #28]
        break;
 8004c6c:	e009      	b.n	8004c82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	61fb      	str	r3, [r7, #28]
        break;
 8004c74:	e005      	b.n	8004c82 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c80:	bf00      	nop
    }

    if (pclk != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d019      	beq.n	8004cbc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	085a      	lsrs	r2, r3, #1
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d909      	bls.n	8004cb6 <UART_SetConfig+0x432>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca8:	d205      	bcs.n	8004cb6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	e002      	b.n	8004cbc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3728      	adds	r7, #40	@ 0x28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd6:	bf00      	nop
 8004cd8:	00f42400 	.word	0x00f42400

08004cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01a      	beq.n	8004df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dda:	d10a      	bne.n	8004df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b098      	sub	sp, #96	@ 0x60
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e30:	f7fc fa4c 	bl	80012cc <HAL_GetTick>
 8004e34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d12e      	bne.n	8004ea2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f88c 	bl	8004f70 <UART_WaitOnFlagUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d021      	beq.n	8004ea2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e6      	bne.n	8004e5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e062      	b.n	8004f68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d149      	bne.n	8004f44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f856 	bl	8004f70 <UART_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d03c      	beq.n	8004f44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e6      	bne.n	8004eca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3308      	adds	r3, #8
 8004f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3308      	adds	r3, #8
 8004f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f1c:	61fa      	str	r2, [r7, #28]
 8004f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	617b      	str	r3, [r7, #20]
   return(result);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e011      	b.n	8004f68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3758      	adds	r7, #88	@ 0x58
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f80:	e04f      	b.n	8005022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d04b      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8a:	f7fc f99f 	bl	80012cc <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e04e      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d037      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b80      	cmp	r3, #128	@ 0x80
 8004fb6:	d034      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d031      	beq.n	8005022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d110      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f838 	bl	800504a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e029      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ffc:	d111      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f81e 	bl	800504a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e00f      	b.n	8005042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	429a      	cmp	r2, r3
 800503e:	d0a0      	beq.n	8004f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800504a:	b480      	push	{r7}
 800504c:	b095      	sub	sp, #84	@ 0x54
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005070:	643b      	str	r3, [r7, #64]	@ 0x40
 8005072:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3308      	adds	r3, #8
 800508a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	61fb      	str	r3, [r7, #28]
   return(result);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d118      	bne.n	80050f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f023 0310 	bic.w	r3, r3, #16
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6979      	ldr	r1, [r7, #20]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	613b      	str	r3, [r7, #16]
   return(result);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e6      	bne.n	80050c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005106:	bf00      	nop
 8005108:	3754      	adds	r7, #84	@ 0x54
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <memset>:
 8005112:	4402      	add	r2, r0
 8005114:	4603      	mov	r3, r0
 8005116:	4293      	cmp	r3, r2
 8005118:	d100      	bne.n	800511c <memset+0xa>
 800511a:	4770      	bx	lr
 800511c:	f803 1b01 	strb.w	r1, [r3], #1
 8005120:	e7f9      	b.n	8005116 <memset+0x4>
	...

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4d0d      	ldr	r5, [pc, #52]	@ (800515c <__libc_init_array+0x38>)
 8005128:	4c0d      	ldr	r4, [pc, #52]	@ (8005160 <__libc_init_array+0x3c>)
 800512a:	1b64      	subs	r4, r4, r5
 800512c:	10a4      	asrs	r4, r4, #2
 800512e:	2600      	movs	r6, #0
 8005130:	42a6      	cmp	r6, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	4d0b      	ldr	r5, [pc, #44]	@ (8005164 <__libc_init_array+0x40>)
 8005136:	4c0c      	ldr	r4, [pc, #48]	@ (8005168 <__libc_init_array+0x44>)
 8005138:	f000 f818 	bl	800516c <_init>
 800513c:	1b64      	subs	r4, r4, r5
 800513e:	10a4      	asrs	r4, r4, #2
 8005140:	2600      	movs	r6, #0
 8005142:	42a6      	cmp	r6, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	f855 3b04 	ldr.w	r3, [r5], #4
 800514c:	4798      	blx	r3
 800514e:	3601      	adds	r6, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	f855 3b04 	ldr.w	r3, [r5], #4
 8005156:	4798      	blx	r3
 8005158:	3601      	adds	r6, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	080051e0 	.word	0x080051e0
 8005160:	080051e0 	.word	0x080051e0
 8005164:	080051e0 	.word	0x080051e0
 8005168:	080051e4 	.word	0x080051e4

0800516c <_init>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	bf00      	nop
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr

08005178 <_fini>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	bf00      	nop
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr
